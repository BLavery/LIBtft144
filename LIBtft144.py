#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   LIBtft144.py                 v1.1.0

#   Raspberry Pi Serial-SPI version.  Tested against the "BLACK" 1.44 board from eBay
#        eg http://www.ebay.com.au/itm/141239781210     - under $4!
#   Board has inbuilt 5V-3V (2.9?) regulator (which does NOT break out the 3V!!)
#   As far as I can discern, logic level is still 3.3V limit, despite supply is 5V.
#   Currently the code here is designed simply for case of 128x128 pixels.
#   Brian Lavery (C) Oct 2014    brian (at) blavery (dot) com
#   Free software, and see below.
#   Added: SPI access, BMP file load, double size fonts, python class
#   Works on: Rasp Pi GPIO,    or "virtual GPIO" 3.3V   (identical library for both)

#                   THIS BOARD WORKS A TREAT !!!!                         BL

#************************************************************************
#
#   (1) Based on ILI9163 128x128 LCD library   - parallel I/O AVR C code
#      Copyright (C) 2012 Simon Inns
#      http://www.waitingforfriday.com/index.php/Reverse_Engineering_a_1.5_inch_Photoframe
#   (2) ... then based on Antares python/parallel Raspberry Pi code:
#      http://www.raspberrypi.org/forums/viewtopic.php?t=58291&p=450201
#   (3) ... making this version LIBtft144 python SPI interface for RPI or Virtual GPIO
#      (It's looking a bit different now from Inns' original!)
#
#   Simon Inns:
#    "This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    "This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    "You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    Email: simon.inns@gmail.com"
#
#************************************************************************/

# 128x128 pixels,
# text fonts:   "5x7" 21 chars/line x 15 lines,    or "10x14"  10 chars/line x 7 lines.
# Note the board is write-only. There is no feedback if board is absent or misbehaving.


from time import sleep
import os

# AUTO: Find if operating on Raspberry Pi GPIO system or on virtual GPIO on PC
# (Re-write this bit to your own case if needed, for simply vGPIO, or for RPI.
#  In any case, this auto method with try/except tends to hide useful error messages.)
try:
    # This para is the vGPIO attempt:
    import virtGPIO as GPIO
    # That succeeded, but is it V0.9.5 or later?
    if GPIO.getVersion() < 95:
        print "Virtual GPIO found, but 0.9.5 + required."
        exit()  # falls through to "except"
    platform = "virtGPIO"   # Need to know later, as init() of the SPI object is different
except:
    try:
        # This para is the RPI-GPIO attempt:
        import RPi.GPIO as GPIO
        # That succeeded
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        import spidev
        platform = "RPI-GPIO"
    except:
        print "No GPIO?"
        exit()


#ILI9163 commands
NOP=0x00
SOFT_RESET=0x01
ENTER_SLEEP_MODE=0x10
EXIT_SLEEP_MODE=0x11
ENTER_PARTIAL_MODE=0x12
ENTER_NORMAL_MODE=0x13
EXIT_INVERT_MODE=0x20
ENTER_INVERT_MODE=0x21
SET_GAMMA_CURVE=0x26
SET_DISPLAY_OFF=0x28
SET_DISPLAY_ON=0x29
SET_COLUMN_ADDRESS=0x2A
SET_PAGE_ADDRESS=0x2B
WRITE_MEMORY_START=0x2C
SET_PARTIAL_AREA=0x30
SET_SCROLL_AREA=0x33
SET_ADDRESS_MODE=0x36
SET_SCROLL_START=0X37
EXIT_IDLE_MODE=0x38
ENTER_IDLE_MODE=0x39
SET_PIXEL_FORMAT=0x3A
WRITE_MEMORY_CONTINUE=0x3C
READ_MEMORY_CONTINUE=0x3E
FRAME_RATE_CONTROL1=0xB1
FRAME_RATE_CONTROL2=0xB2
FRAME_RATE_CONTROL3=0xB3
DISPLAY_INVERSION=0xB4
POWER_CONTROL1=0xC0
POWER_CONTROL2=0xC1
POWER_CONTROL3=0xC2
POWER_CONTROL4=0xC3
POWER_CONTROL5=0xC4
VCOM_CONTROL1=0xC5
VCOM_CONTROL2=0xC6
VCOM_OFFSET_CONTROL=0xC7
POSITIVE_GAMMA_CORRECT=0xE0
NEGATIVE_GAMMA_CORRECT=0xE1
GAM_R_SEL=0xF2


# array 6x8, Unicode set
font6x8=(     # Array format 6x8 different from other 3.
    [0x00,0x00,0x00,0x00,0x00,0x00],   #   0x00 0
    [0x00,0x64,0x18,0x04,0x64,0x18],   #   0x01 1
    [0x00,0x3c,0x40,0x40,0x20,0x7c],   #   0x02 2
    [0x00,0x0c,0x30,0x40,0x30,0x0c],   #   0x03 3
    [0x00,0x3c,0x40,0x30,0x40,0x3c],   #   0x04 4
    [0x00,0x00,0x3e,0x1c,0x08,0x00],   #   0x05 5
    [0x00,0x04,0x1e,0x1f,0x1e,0x04],   #   0x06 6
    [0x00,0x10,0x3c,0x7c,0x3c,0x10],   #   0x07 7
    [0x00,0x20,0x40,0x3e,0x01,0x02],   #   0x08 8
    [0x00,0x22,0x14,0x08,0x14,0x22],   #   0x09 9
    [0x00,0x00,0x38,0x28,0x38,0x00],   #   0x0a 10
    [0x00,0x00,0x10,0x38,0x10,0x00],   #  0x0b 11
    [0x00,0x00,0x00,0x10,0x00,0x00],   #  0x0c 12
    [0x00,0x08,0x78,0x08,0x00,0x00],   #   0x0d 13
    [0x00,0x00,0x15,0x15,0x0a,0x00],   #   0x0e 14
    [0x00,0x7f,0x7f,0x09,0x09,0x01],   #   0x0f 15
    [0x00,0x10,0x20,0x7f,0x01,0x01],   #   0x10 16
    [0x00,0x04,0x04,0x00,0x01,0x1f],   #   0x11 17
    [0x00,0x00,0x19,0x15,0x12,0x00],   #   0x12 18
    [0x00,0x40,0x60,0x50,0x48,0x44],   #   0x13 19
    [0x00,0x06,0x09,0x09,0x06,0x00],   #   0x14 20
    [0x00,0x0f,0x02,0x01,0x01,0x00],   #   0x15 21
    [0x00,0x00,0x01,0x1f,0x01,0x00],   #   0x16 22
    [0x00,0x44,0x44,0x4a,0x4a,0x51],   #   0x17 23
    [0x00,0x14,0x74,0x1c,0x17,0x14],   #   0x18 24
    [0x00,0x51,0x4a,0x4a,0x44,0x44],   #   0x19 25
    [0x00,0x00,0x00,0x04,0x04,0x04],   #   0x1a 26
    [0x00,0x00,0x7c,0x54,0x54,0x44],   #   0x1b 27
    [0x00,0x08,0x08,0x2a,0x1c,0x08],   #   0x1c 28
    [0x00,0x7c,0x00,0x7c,0x44,0x7c],   #   0x1d 29
    [0x00,0x04,0x02,0x7f,0x02,0x04],   #   0x1e 30
    [0x00,0x10,0x20,0x7f,0x20,0x10],   #   0x1f 31
    [0x00,0x00,0x00,0x00,0x00,0x00],   #   0x20 32
    [0x00,0x00,0x00,0x6f,0x00,0x00],   # ! 0x21 33
    [0x00,0x00,0x07,0x00,0x07,0x00],   # " 0x22 34
    [0x00,0x14,0x7f,0x14,0x7f,0x14],   # # 0x23 35
    [0x00,0x00,0x07,0x04,0x1e,0x00],   # $ 0x24 36
    [0x00,0x23,0x13,0x08,0x64,0x62],   # % 0x25 37
    [0x00,0x36,0x49,0x56,0x20,0x50],   # & 0x26 38
    [0x00,0x00,0x00,0x07,0x00,0x00],   # ' 0x27 39
    [0x00,0x00,0x1c,0x22,0x41,0x00],   # ( 0x28 40
    [0x00,0x00,0x41,0x22,0x1c,0x00],   # ) 0x29 41
    [0x00,0x14,0x08,0x3e,0x08,0x14],   # * 0x2a 42
    [0x00,0x08,0x08,0x3e,0x08,0x08],   # + 0x2b 43
    [0x00,0x00,0x50,0x30,0x00,0x00],   # , 0x2c 44
    [0x00,0x08,0x08,0x08,0x08,0x08],   # - 0x2d 45
    [0x00,0x00,0x60,0x60,0x00,0x00],   # . 0x2e 46
    [0x00,0x20,0x10,0x08,0x04,0x02],   # / 0x2f 47
    [0x00,0x3e,0x51,0x49,0x45,0x3e],   # 0 0x30 48
    [0x00,0x00,0x42,0x7f,0x40,0x00],   # 1 0x31 49
    [0x00,0x42,0x61,0x51,0x49,0x46],   # 2 0x32 50
    [0x00,0x21,0x41,0x45,0x4b,0x31],   # 3 0x33 51
    [0x00,0x18,0x14,0x12,0x7f,0x10],   # 4 0x34 52
    [0x00,0x27,0x45,0x45,0x45,0x39],   # 5 0x35 53
    [0x00,0x3c,0x4a,0x49,0x49,0x30],   # 6 0x36 54
    [0x00,0x01,0x71,0x09,0x05,0x03],   # 7 0x37 55
    [0x00,0x36,0x49,0x49,0x49,0x36],   # 8 0x38 56
    [0x00,0x06,0x49,0x49,0x29,0x1e],   # 9 0x39 57
    [0x00,0x00,0x36,0x36,0x00,0x00],   # : 0x3a 58
    [0x00,0x00,0x56,0x36,0x00,0x00],   # ; 0x3b 59
    [0x00,0x08,0x14,0x22,0x41,0x00],   # < 0x3c 60
    [0x00,0x14,0x14,0x14,0x14,0x14],   # = 0x3d 61
    [0x00,0x00,0x41,0x22,0x14,0x08],   # > 0x3e 62
    [0x00,0x02,0x01,0x51,0x09,0x06],   # ? 0x3f 63
    [0x00,0x3e,0x41,0x5d,0x49,0x4e],   # @ 0x40 64
    [0x00,0x7e,0x09,0x09,0x09,0x7e],   # A 0x41 65
    [0x00,0x7f,0x49,0x49,0x49,0x36],   # B 0x42 66
    [0x00,0x3e,0x41,0x41,0x41,0x22],   # C 0x43 67
    [0x00,0x7f,0x41,0x41,0x41,0x3e],   # D 0x44 68
    [0x00,0x7f,0x49,0x49,0x49,0x41],   # E 0x45 69
    [0x00,0x7f,0x09,0x09,0x09,0x01],   # F 0x46 70
    [0x00,0x3e,0x41,0x49,0x49,0x7a],   # G 0x47 71
    [0x00,0x7f,0x08,0x08,0x08,0x7f],   # H 0x48 72
    [0x00,0x00,0x41,0x7f,0x41,0x00],   # I 0x49 73
    [0x00,0x20,0x40,0x41,0x3f,0x01],   # J 0x4a 74
    [0x00,0x7f,0x08,0x14,0x22,0x41],   # K 0x4b 75
    [0x00,0x7f,0x40,0x40,0x40,0x40],   # L 0x4c 76
    [0x00,0x7f,0x02,0x0c,0x02,0x7f],   # M 0x4d 77
    [0x00,0x7f,0x04,0x08,0x10,0x7f],   # N 0x4e 78
    [0x00,0x3e,0x41,0x41,0x41,0x3e],   # O 0x4f 79
    [0x00,0x7f,0x09,0x09,0x09,0x06],   # P 0x50 80
    [0x00,0x3e,0x41,0x51,0x21,0x5e],   # Q 0x51 81
    [0x00,0x7f,0x09,0x19,0x29,0x46],   # R 0x52 82
    [0x00,0x46,0x49,0x49,0x49,0x31],   # S 0x53 83
    [0x00,0x01,0x01,0x7f,0x01,0x01],   # T 0x54 84
    [0x00,0x3f,0x40,0x40,0x40,0x3f],   # U 0x55 85
    [0x00,0x0f,0x30,0x40,0x30,0x0f],   # V 0x56 86
    [0x00,0x3f,0x40,0x30,0x40,0x3f],   # W 0x57 87
    [0x00,0x63,0x14,0x08,0x14,0x63],   # X 0x58 88
    [0x00,0x07,0x08,0x70,0x08,0x07],   # Y 0x59 89
    [0x00,0x61,0x51,0x49,0x45,0x43],   # Z 0x5a 90
    [0x00,0x3c,0x4a,0x49,0x29,0x1e],   # [ 0x5b 91
    [0x00,0x02,0x04,0x08,0x10,0x20],   # \ 0x5c 92
    [0x00,0x00,0x41,0x7f,0x00,0x00],   # ] 0x5d 93
    [0x00,0x04,0x02,0x01,0x02,0x04],   # ^ 0x5e 94
    [0x00,0x40,0x40,0x40,0x40,0x40],   # _ 0x5f 95
    [0x00,0x00,0x00,0x03,0x04,0x00],   # ` 0x60 96
    [0x00,0x20,0x54,0x54,0x54,0x78],   # a 0x61 97
    [0x00,0x7f,0x48,0x44,0x44,0x38],   # b 0x62 98
    [0x00,0x38,0x44,0x44,0x44,0x20],   # c 0x63 99
    [0x00,0x38,0x44,0x44,0x48,0x7f],   # d 0x64 100
    [0x00,0x38,0x54,0x54,0x54,0x18],   # e 0x65 101
    [0x00,0x08,0x7e,0x09,0x01,0x02],   # f 0x66 102
    [0x00,0x0c,0x52,0x52,0x52,0x3e],   # g 0x67 103
    [0x00,0x7f,0x08,0x04,0x04,0x78],   # h 0x68 104
    [0x00,0x00,0x44,0x7d,0x40,0x00],   # i 0x69 105
    [0x00,0x20,0x40,0x44,0x3d,0x00],   # j 0x6a 106
    [0x00,0x00,0x7f,0x10,0x28,0x44],   # k 0x6b 107
    [0x00,0x00,0x41,0x7f,0x40,0x00],   # l 0x6c 108
    [0x00,0x7c,0x04,0x18,0x04,0x78],   # m 0x6d 109
    [0x00,0x7c,0x08,0x04,0x04,0x78],   # n 0x6e 110
    [0x00,0x38,0x44,0x44,0x44,0x38],   # o 0x6f 111
    [0x00,0x7c,0x14,0x14,0x14,0x08],   # p 0x70 112
    [0x00,0x08,0x14,0x14,0x18,0x7c],   # q 0x71 113
    [0x00,0x7c,0x08,0x04,0x04,0x08],   # r 0x72 114
    [0x00,0x48,0x54,0x54,0x54,0x20],   # s 0x73 115
    [0x00,0x04,0x3f,0x44,0x40,0x20],   # t 0x74 116
    [0x00,0x3c,0x40,0x40,0x20,0x7c],   # u 0x75 117
    [0x00,0x1c,0x20,0x40,0x20,0x1c],   # v 0x76 118
    [0x00,0x3c,0x40,0x30,0x40,0x3c],   # w 0x77 119
    [0x00,0x44,0x28,0x10,0x28,0x44],   # x 0x78 120
    [0x00,0x0c,0x50,0x50,0x50,0x3c],   # y 0x79 121
    [0x00,0x44,0x64,0x54,0x4c,0x44],   # z 0x7a 122
    [0x00,0x00,0x08,0x36,0x41,0x41],   # [ 0x7b 123
    [0x00,0x00,0x00,0x7f,0x00,0x00],   # | 0x7c 124
    [0x00,0x41,0x41,0x36,0x08,0x00],   # ] 0x7d 125
    [0x00,0x04,0x02,0x04,0x08,0x04],   # ~ 0x7e 126
    [0x00,0x7f,0x6b,0x6b,0x6b,0x7f],   #   0x7f 127
    [0x00,0x00,0x7c,0x44,0x7c,0x00],   # ¬ 0x80 128
    [0x00,0x00,0x08,0x7c,0x00,0x00],   # ? 0x81 129
    [0x00,0x00,0x64,0x54,0x48,0x00],   #  0x82 130
    [0x00,0x00,0x44,0x54,0x28,0x00],   #  0x83 131
    [0x00,0x00,0x1c,0x10,0x78,0x00],   #  0x84 132
    [0x00,0x00,0x5c,0x54,0x24,0x00],   #  0x85 133
    [0x00,0x00,0x78,0x54,0x74,0x00],   #  0x86 134
    [0x00,0x00,0x64,0x14,0x0c,0x00],   #  0x87 135
    [0x00,0x00,0x7c,0x54,0x7c,0x00],   #  0x88 136
    [0x00,0x00,0x5c,0x54,0x3c,0x00],   #  0x89 137
    [0x00,0x78,0x24,0x26,0x25,0x78],   #  0x8a 138
    [0x00,0x78,0x25,0x26,0x24,0x78],   #  0x8b 139
    [0x00,0x70,0x2a,0x29,0x2a,0x70],   #  0x8c 140
    [0x00,0x78,0x25,0x24,0x25,0x78],   # ? 0x8d 141
    [0x00,0x20,0x54,0x56,0x55,0x78],   # ] 0x8e 142
    [0x00,0x20,0x55,0x56,0x54,0x78],   # ? 0x8f 143
    [0x00,0x20,0x56,0x55,0x56,0x78],   # ? 0x90 144
    [0x00,0x20,0x55,0x54,0x55,0x78],   #  0x91 145
    [0x00,0x7c,0x54,0x56,0x55,0x44],   #  0x92 146
    [0x00,0x7c,0x55,0x56,0x54,0x44],   #  0x93 147
    [0x00,0x7c,0x56,0x55,0x56,0x44],   #  0x94 148
    [0x00,0x7c,0x55,0x54,0x55,0x44],   #  0x95 149
    [0x00,0x38,0x54,0x56,0x55,0x18],   #  0x96 150
    [0x00,0x38,0x55,0x56,0x54,0x18],   #  0x97 151
    [0x00,0x38,0x56,0x55,0x56,0x18],   #  0x98 152
    [0x00,0x38,0x55,0x54,0x55,0x18],   #  0x99 153
    [0x00,0x00,0x44,0x7e,0x45,0x00],   #  0x9a 154
    [0x00,0x00,0x45,0x7e,0x44,0x00],   #  0x9b 155
    [0x00,0x00,0x46,0x7d,0x46,0x00],   #  0x9c 156
    [0x00,0x00,0x45,0x7c,0x45,0x00],   # ? 0x9d 157
    [0x00,0x00,0x48,0x7a,0x41,0x00],   # ~ 0x9e 158
    [0x00,0x00,0x49,0x7a,0x40,0x00],   #  0x9f 159
    [0x00,0x00,0x4a,0x79,0x42,0x00],   #   0xa0 160
    [0x00,0x00,0x49,0x78,0x41,0x00],   # ¡ 0xa1 161
    [0x00,0x38,0x44,0x46,0x45,0x38],   # ¢ 0xa2 162
    [0x00,0x38,0x45,0x46,0x44,0x38],   # £ 0xa3 163
    [0x00,0x38,0x46,0x45,0x46,0x38],   # ¤ 0xa4 164
    [0x00,0x38,0x45,0x44,0x45,0x38],   # ¥ 0xa5 165
    [0x00,0x30,0x48,0x4a,0x49,0x30],   # ¦ 0xa6 166
    [0x00,0x30,0x49,0x4a,0x48,0x30],   # § 0xa7 167
    [0x00,0x30,0x4a,0x49,0x4a,0x30],   # ¨ 0xa8 168
    [0x00,0x30,0x49,0x48,0x49,0x30],   # © 0xa9 169
    [0x00,0x3c,0x40,0x42,0x41,0x3c],   # ª 0xaa 170
    [0x00,0x3c,0x41,0x42,0x40,0x3c],   # « 0xab 171
    [0x00,0x3c,0x42,0x41,0x42,0x3c],   # ¬ 0xac 172
    [0x00,0x3c,0x41,0x40,0x41,0x3c],   # ­  0xad 173
    [0x00,0x3c,0x40,0x42,0x21,0x7c],   # ® 0xae 174
    [0x00,0x3c,0x41,0x42,0x20,0x7c],   # ¯ 0xaf 175
    [0x00,0x38,0x42,0x41,0x22,0x78],   # ° 0xb0 176
    [0x00,0x3c,0x41,0x40,0x21,0x7c],   # ± 0xb1 177
    [0x00,0x4e,0x51,0x71,0x11,0x0a],   # ² 0xb2 178
    [0x00,0x58,0x64,0x64,0x24,0x10],   # ³ 0xb3 179
    [0x00,0x7c,0x0a,0x11,0x22,0x7d],   # ´ 0xb4 180
    [0x00,0x78,0x12,0x09,0x0a,0x71],   # µ 0xb5 181
    [0x00,0x00,0x00,0x04,0x02,0x01],   # ¶ 0xb6 182
    [0x00,0x01,0x02,0x04,0x00,0x00],   # · 0xb7 183
    [0x00,0x00,0x02,0x00,0x02,0x00],   # ¸ 0xb8 184
    [0x00,0x30,0x48,0x45,0x40,0x20],   # ¹ 0xb9 185
    [0x00,0x00,0x00,0x7b,0x00,0x00],   # º 0xba 186
    [0x00,0x38,0x44,0x44,0x38,0x44],   # » 0xbb 187
    [0x00,0x40,0x3e,0x49,0x49,0x36],   # ¼ 0xbc 188
    [0x00,0x08,0x04,0x08,0x70,0x0c],   # ½ 0xbd 189
    [0x00,0x60,0x50,0x48,0x50,0x60],   # ¾ 0xbe 190
    [0x00,0x20,0x52,0x55,0x59,0x30],   # ¿ 0xbf 191
    [0x00,0x38,0x54,0x54,0x54,0x00],   # À 0xc0 192
    [0x00,0x00,0x00,0x7f,0x41,0x00],   # Á 0xc1 193
    [0x00,0x40,0x22,0x14,0x18,0x60],   # Â 0xc2 194
    [0x00,0x7c,0x20,0x20,0x1c,0x20],   # Ã 0xc3 195
    [0x00,0x44,0x3c,0x04,0x7c,0x44],   # Ä 0xc4 196
    [0x00,0x40,0x3c,0x12,0x12,0x0c],   # Å 0xc5 197
    [0x00,0x41,0x63,0x55,0x49,0x41],   # Æ 0xc6 198
    [0x00,0x38,0x44,0x44,0x3c,0x04],   # Ç 0xc7 199
    [0x00,0x08,0x04,0x3c,0x44,0x24],   # È 0xc8 200
    [0x00,0x08,0x14,0x7f,0x14,0x08],   # É 0xc9 201
    [0x00,0x4e,0x71,0x01,0x71,0x4e],   # Ê 0xca 202
    [0x00,0x45,0x29,0x11,0x29,0x45],   # Ë 0xcb 203
    [0x00,0x0d,0x51,0x51,0x51,0x3d],   # Ì 0xcc 204
    [0x00,0x00,0x00,0x05,0x02,0x05],   # Í 0xcd 205
    [0x00,0x40,0x00,0x40,0x00,0x40],   # Î 0xce 206
    [0x00,0x00,0x08,0x1c,0x3e,0x00],   # Ï 0xcf 207
    [0x00,0x1c,0x1c,0x1c,0x00,0x00],   # Ð 0xd0 208
    [0x00,0x00,0x70,0x08,0x07,0x00],   # Ñ 0xd1 209
    [0x00,0x00,0x08,0x08,0x08,0x00],   # Ò 0xd2 210
    [0x00,0x00,0x1d,0x15,0x17,0x00],   # Ó 0xd3 211
    [0x00,0x00,0x07,0x05,0x07,0x00],   # Ô 0xd4 212
    [0x00,0x00,0x11,0x15,0x0a,0x00],   # Õ 0xd5 213
    [0x00,0x00,0x00,0x00,0x00,0x00],   # Ö 0xd6 214
    [0x00,0x04,0x3c,0x41,0x20,0x00],   # × 0xd7 215
    [0x00,0x7c,0x16,0x15,0x16,0x08],   # Ø 0xd8 216
    [0x00,0x21,0x16,0x08,0x34,0x42],   # Ù 0xd9 217
    [0x00,0x7f,0x09,0x1d,0x01,0x03],   # Ú 0xda 218
    [0x00,0x38,0x54,0x54,0x14,0x08],   # Û 0xdb 219
    [0x00,0x00,0x00,0x7c,0x40,0x40],   # Ü 0xdc 220
    [0x00,0x7f,0x0e,0x1c,0x38,0x7f],   # Ý 0xdd 221
    [0x00,0x41,0x22,0x5d,0x22,0x1c],   # Þ 0xde 222
    [0x00,0x1c,0x3e,0x1c,0x08,0x00],   # ß 0xdf 223
    [0x00,0x7f,0x7f,0x7f,0x7f,0x7f],   # à 0xe0 224
    [0x00,0x77,0x7b,0x01,0x7b,0x77],   # á 0xe1 225
    [0x00,0x7f,0x43,0x75,0x43,0x7f],   # â 0xe2 226
    [0x00,0x7f,0x6f,0x55,0x43,0x7f],   # ã 0xe3 227
    [0x00,0x40,0x40,0x40,0x40,0x40],   # ä 0xe4 228
    [0x00,0x44,0x42,0x5f,0x42,0x44],   # å 0xe5 229
    [0x00,0x40,0x5e,0x45,0x5e,0x40],   # æ 0xe6 230
    [0x00,0x40,0x48,0x55,0x5e,0x40],   # ç 0xe7 231
    [0x00,0x00,0x04,0x08,0x10,0x20],   # è 0xe8 232
    [0x00,0x03,0x07,0x0e,0x1c,0x38],   # é 0xe9 233
    [0x00,0x01,0x03,0x07,0x0f,0x1f],   # ê 0xea 234
    [0x00,0x7c,0x78,0x70,0x60,0x40],   # ë 0xeb 235
    [0x00,0x08,0x08,0x1c,0x22,0x1c],   # ì 0xec 236
    [0x00,0x00,0x1c,0x22,0x1c,0x00],   # í 0xed 237
    [0x00,0x02,0x00,0x08,0x00,0x20],   # î 0xee 238
    [0x00,0x04,0x3e,0x3f,0x3e,0x04],   # ï 0xef 239
    [0x00,0x10,0x3e,0x7e,0x3e,0x10],   # ð 0xf0 240
    [0x00,0x55,0x2a,0x55,0x2a,0x55],   # ñ 0xf1 241
    [0x00,0x24,0x2a,0x7f,0x2a,0x12],   # ò 0xf2 242
    [0x00,0x04,0x1e,0x1f,0x1e,0x04],   # ó 0xf3 243
    [0x00,0x00,0x00,0x00,0x00,0x00],   # ô 0xf4 244
    [0x00,0x00,0x00,0x00,0x00,0x00],   # õ 0xf5 245
    [0x00,0x00,0x00,0x00,0x00,0x00],   # ö 0xf6 246
    [0x00,0x00,0x00,0x00,0x00,0x00],   # ÷ 0xf7 247
    [0xf0,0xf0,0xf0,0x00,0x00,0x00],   #  0xf8 248
    [0x00,0x00,0x00,0xf0,0xf0,0xf0],   #  0xf9 249
    [0x0f,0x0f,0x0f,0x00,0x00,0x00],   #  0xfa 250
    [0x00,0x00,0x00,0x0f,0x0f,0x0f],   #  0xfb 251
    [0x24,0xff,0x24,0x24,0xff,0x24],   #  0xfc 252
    [0x10,0x10,0x10,0xff,0x10,0x10],   #  0xfd 253
    [0x55,0xaa,0x55,0xaa,0x55,0xaa],   #   0xfe 254
    [0xff,0xff,0xff,0xff,0xff,0xff])   #   0xff 255
    # Added a few old-fashioned block graphic characters at the end of this!  BL


font8x16=(
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],      #   0x20 32
    [0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x18,0x18,0x00,0x00],
    [0x00,0x48,0x6C,0x24,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x7F,0x12,0x12,0x12,0x00,0x00],
    [0x00,0x00,0x08,0x1C,0x2A,0x2A,0x0A,0x0C,0x18,0x28,0x28,0x2A,0x2A,0x1C,0x08,0x08],
    [0x00,0x00,0x00,0x22,0x25,0x15,0x15,0x15,0x2A,0x58,0x54,0x54,0x54,0x22,0x00,0x00],
    [0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0A,0x76,0x25,0x29,0x11,0x91,0x6E,0x00,0x00],
    [0x00,0x06,0x06,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00],
    [0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00],
    [0x00,0x00,0x00,0x00,0x08,0x08,0x6B,0x1C,0x1C,0x6B,0x08,0x08,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x08,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x04,0x03],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00],
    [0x00,0x00,0x80,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00],
    [0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00],
    [0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x20,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00],
    [0x00,0x00,0x00,0x3C,0x42,0x42,0x20,0x18,0x20,0x40,0x40,0x42,0x22,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x20,0x30,0x28,0x24,0x24,0x22,0x22,0x7E,0x20,0x20,0x78,0x00,0x00],
    [0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1A,0x26,0x40,0x40,0x42,0x22,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x38,0x24,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x24,0x18,0x00,0x00],
    [0x00,0x00,0x00,0x7E,0x22,0x22,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
    [0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00],
    [0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0x24,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x04],
    [0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00],
    [0x00,0x00,0x00,0x3C,0x42,0x42,0x46,0x40,0x20,0x10,0x10,0x00,0x18,0x18,0x00,0x00],
    [0x00,0x00,0x00,0x1C,0x22,0x5A,0x55,0x55,0x55,0x55,0x2D,0x42,0x22,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00],
    [0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00],
    [0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00],
    [0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00],
    [0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00],
    [0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00],
    [0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F],
    [0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00],
    [0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00],
    [0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00],
    [0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00],
    [0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00],
    [0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x4D,0x53,0x32,0x1C,0x60,0x00],
    [0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00],
    [0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00],
    [0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00],
    [0x00,0x00,0x00,0x6B,0x49,0x49,0x49,0x49,0x55,0x55,0x36,0x22,0x22,0x22,0x00,0x00],
    [0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00],
    [0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00],
    [0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00],
    [0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00],
    [0x00,0x00,0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x40],
    [0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00],
    [0x00,0x38,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF],
    [0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x78,0x44,0x42,0x42,0xFC,0x00,0x00],
    [0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00],
    [0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x78,0x44,0x42,0x42,0x42,0x64,0xD8,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x42,0x3C,0x00,0x00],
    [0x00,0x00,0x00,0xF0,0x88,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C],
    [0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00],
    [0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E],
    [0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x72,0x12,0x0A,0x16,0x12,0x22,0x77,0x00,0x00],
    [0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x22,0x1E,0x02,0x07],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0xE0],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x30,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x08,0x08,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x49,0x49,0x55,0x55,0x22,0x22,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x18,0x08,0x08,0x07],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00],
    [0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00],
    [0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10],
    [0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00],
    [0x0C,0x32,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00])      # ~ 0x7e 126


font8x12=(

  [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],   #  32
  [0x00,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00],
  [0x00,0x6C,0x6C,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x48,0x48,0x24,0x7E,0x24,0x24,0x7E,0x24,0x12,0x12,0x00,0x00,0x00],
  [0x10,0x38,0x24,0x04,0x18,0x20,0x24,0x1C,0x10,0x10,0x00,0x00,0x00],
  [0x00,0x04,0x0A,0x04,0x30,0x0E,0x10,0x28,0x10,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x70,0x08,0x08,0x18,0x54,0x24,0x78,0x00,0x00,0x00,0x00],
  [0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x00,0x20,0x20,0x10,0x10,0x10,0x10,0x10,0x10,0x20,0x20,0x00,0x00],
  [0x00,0x04,0x04,0x08,0x08,0x08,0x08,0x08,0x08,0x04,0x04,0x00,0x00],
  [0x00,0x10,0x7C,0x10,0x28,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x10,0x10,0x10,0xFE,0x10,0x10,0x10,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x08,0x0C,0x04,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00],
  [0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00,0x00,0x00],
  [0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00],
  [0x00,0x10,0x1C,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x1C,0x22,0x20,0x10,0x08,0x04,0x22,0x3E,0x00,0x00,0x00,0x00],
  [0x00,0x1C,0x22,0x20,0x18,0x20,0x20,0x22,0x1C,0x00,0x00,0x00,0x00],
  [0x00,0x30,0x28,0x24,0x24,0x7E,0x20,0x20,0x70,0x00,0x00,0x00,0x00],
  [0x00,0x7C,0x04,0x04,0x3C,0x40,0x40,0x42,0x3C,0x00,0x00,0x00,0x00],
  [0x00,0x70,0x08,0x04,0x3C,0x44,0x44,0x44,0x38,0x00,0x00,0x00,0x00],
  [0x00,0x7E,0x42,0x40,0x20,0x20,0x10,0x10,0x10,0x00,0x00,0x00,0x00],
  [0x00,0x3C,0x42,0x42,0x3C,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00],
  [0x00,0x3C,0x42,0x42,0x42,0x7C,0x40,0x20,0x1E,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x18,0x0C,0x04,0x00,0x00,0x00],
  [0x00,0x00,0x40,0x30,0x08,0x06,0x08,0x30,0x40,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x02,0x0C,0x10,0x60,0x10,0x0C,0x02,0x00,0x00,0x00,0x00],
  [0x00,0x38,0x44,0x40,0x40,0x20,0x10,0x00,0x18,0x00,0x00,0x00,0x00],
  [0x1C,0x22,0x22,0x32,0x2A,0x2A,0x32,0x02,0x22,0x1C,0x00,0x00,0x00],
  [0x00,0x18,0x10,0x28,0x28,0x28,0x38,0x44,0xEE,0x00,0x00,0x00,0x00],
  [0x00,0x3E,0x44,0x44,0x3C,0x44,0x44,0x44,0x3E,0x00,0x00,0x00,0x00],
  [0x00,0x78,0x44,0x02,0x02,0x02,0x02,0x44,0x38,0x00,0x00,0x00,0x00],
  [0x00,0x1E,0x24,0x44,0x44,0x44,0x44,0x24,0x1E,0x00,0x00,0x00,0x00],
  [0x00,0x7E,0x44,0x14,0x1C,0x14,0x04,0x44,0x7E,0x00,0x00,0x00,0x00],
  [0x00,0x7E,0x44,0x14,0x1C,0x14,0x04,0x04,0x0E,0x00,0x00,0x00,0x00],
  [0x00,0x78,0x44,0x02,0x02,0xE2,0x42,0x44,0x38,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x44,0x44,0x7C,0x44,0x44,0x44,0xEE,0x00,0x00,0x00,0x00],
  [0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x78,0x20,0x20,0x20,0x22,0x22,0x22,0x1C,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x44,0x24,0x14,0x1C,0x24,0x44,0xCE,0x00,0x00,0x00,0x00],
  [0x00,0x0E,0x04,0x04,0x04,0x04,0x44,0x44,0x7E,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x6C,0x6C,0x54,0x54,0x44,0x44,0xEE,0x00,0x00,0x00,0x00],
  [0x00,0xE7,0x46,0x4A,0x4A,0x52,0x52,0x62,0x67,0x00,0x00,0x00,0x00],
  [0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00,0x00,0x00],
  [0x00,0x3E,0x44,0x44,0x44,0x3C,0x04,0x04,0x0E,0x00,0x00,0x00,0x00],
  [0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x44,0x38,0xF8,0x00,0x00,0x00],
  [0x00,0x3E,0x44,0x44,0x44,0x3C,0x24,0x44,0x8E,0x00,0x00,0x00,0x00],
  [0x00,0x5C,0x62,0x02,0x3C,0x40,0x40,0x46,0x3A,0x00,0x00,0x00,0x00],
  [0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00,0x00,0x00],
  [0x00,0xE7,0x42,0x42,0x24,0x24,0x24,0x18,0x18,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x44,0x44,0x54,0x54,0x54,0x54,0x28,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x44,0x28,0x10,0x10,0x28,0x44,0xEE,0x00,0x00,0x00,0x00],
  [0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x10,0x38,0x00,0x00,0x00,0x00],
  [0x00,0x7C,0x44,0x20,0x10,0x10,0x08,0x44,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x38,0x00,0x00],
  [0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x10,0x00,0x00,0x00],
  [0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0E,0x00,0x00],
  [0x08,0x08,0x14,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF],
  [0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x3C,0x42,0x7C,0x42,0x62,0xDC,0x00,0x00,0x00,0x00],
  [0x00,0x03,0x02,0x3A,0x46,0x42,0x42,0x46,0x3B,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x5C,0x62,0x02,0x02,0x42,0x3C,0x00,0x00,0x00,0x00],
  [0x00,0x60,0x40,0x5C,0x62,0x42,0x42,0x62,0xDC,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x70,0x08,0x7E,0x08,0x08,0x08,0x08,0x7E,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0xDC,0x62,0x42,0x42,0x62,0x5C,0x40,0x3C,0x00,0x00],
  [0x00,0x06,0x04,0x34,0x4C,0x44,0x44,0x44,0xEE,0x00,0x00,0x00,0x00],
  [0x00,0x10,0x00,0x1C,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x10,0x00,0x3C,0x20,0x20,0x20,0x20,0x20,0x20,0x1E,0x00,0x00],
  [0x00,0x06,0x04,0xF4,0x24,0x1C,0x14,0x24,0xE6,0x00,0x00,0x00,0x00],
  [0x00,0x18,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x4B,0xB6,0x92,0x92,0x92,0xB7,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x36,0x4C,0x44,0x44,0x44,0xEE,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x36,0x4C,0x44,0x44,0x44,0x3C,0x04,0x0E,0x00,0x00],
  [0x00,0x00,0x00,0xDC,0x62,0x42,0x42,0x62,0x5C,0x40,0xE0,0x00,0x00],
  [0x00,0x00,0x00,0x76,0x0C,0x04,0x04,0x04,0x3E,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x7C,0x42,0x3C,0x40,0x42,0x3E,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x04,0x3E,0x04,0x04,0x04,0x44,0x38,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x66,0x44,0x44,0x44,0x64,0xD8,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0xEE,0x44,0x54,0x54,0x54,0x28,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x66,0x24,0x18,0x18,0x24,0x66,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x1C,0x00,0x00],
  [0x00,0x00,0x00,0x7C,0x24,0x10,0x08,0x44,0x7C,0x00,0x00,0x00,0x00],
  [0x00,0x10,0x08,0x08,0x08,0x04,0x08,0x08,0x08,0x10,0x00,0x00,0x00],
  [0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
  [0x00,0x04,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x04,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x4C,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00])   #  126


font4x6=(
  [0x00,0x00,0x00,0x00,0x00,0x00],     #  char num 32
  [0x04,0x04,0x04,0x00,0x04,0x00],
  [0x0A,0x0A,0x00,0x00,0x00,0x00],
  [0x0A,0x0E,0x0A,0x0E,0x0A,0x00],
  [0x04,0x0C,0x06,0x0C,0x06,0x04],
  [0x02,0x08,0x04,0x02,0x08,0x00],
  [0x04,0x0A,0x0C,0x0A,0x0E,0x00],
  [0x06,0x02,0x00,0x00,0x00,0x00],
  [0x04,0x02,0x02,0x02,0x04,0x00],
  [0x02,0x04,0x04,0x04,0x02,0x00],
  [0x0A,0x04,0x0E,0x04,0x0A,0x00],
  [0x00,0x04,0x0E,0x04,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x06,0x02],
  [0x00,0x00,0x0E,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x04,0x00],
  [0x08,0x08,0x04,0x02,0x02,0x00],
  [0x0C,0x0A,0x0A,0x0A,0x06,0x00],
  [0x04,0x06,0x04,0x04,0x0E,0x00],
  [0x06,0x08,0x04,0x02,0x0E,0x00],
  [0x06,0x08,0x04,0x08,0x06,0x00],
  [0x08,0x0A,0x0E,0x08,0x08,0x00],
  [0x0E,0x02,0x06,0x08,0x06,0x00],
  [0x04,0x02,0x06,0x0A,0x04,0x00],
  [0x0E,0x08,0x0C,0x04,0x04,0x00],
  [0x04,0x0A,0x04,0x0A,0x04,0x00],
  [0x04,0x0A,0x0C,0x08,0x04,0x00],
  [0x00,0x00,0x04,0x00,0x04,0x00],
  [0x00,0x00,0x04,0x00,0x06,0x02],
  [0x08,0x04,0x02,0x04,0x08,0x00],
  [0x00,0x00,0x0E,0x00,0x0E,0x00],
  [0x02,0x04,0x08,0x04,0x02,0x00],
  [0x06,0x08,0x04,0x00,0x04,0x00],
  [0x0E,0x0A,0x0A,0x02,0x0E,0x00],
  [0x04,0x0A,0x0E,0x0A,0x0A,0x00],
  [0x06,0x0A,0x06,0x0A,0x06,0x00],
  [0x0C,0x02,0x02,0x02,0x0C,0x00],
  [0x06,0x0A,0x0A,0x0A,0x06,0x00],
  [0x0E,0x02,0x06,0x02,0x0E,0x00],
  [0x0E,0x02,0x06,0x02,0x02,0x00],
  [0x0C,0x02,0x0A,0x0A,0x0C,0x00],
  [0x0A,0x0A,0x0E,0x0A,0x0A,0x00],
  [0x0E,0x04,0x04,0x04,0x0E,0x00],
  [0x08,0x08,0x08,0x0A,0x04,0x00],
  [0x0A,0x0A,0x06,0x0A,0x0A,0x00],
  [0x02,0x02,0x02,0x02,0x0E,0x00],
  [0x0A,0x0E,0x0E,0x0A,0x0A,0x00],
  [0x0A,0x0E,0x0A,0x0A,0x0A,0x00],
  [0x04,0x0A,0x0A,0x0A,0x04,0x00],
  [0x06,0x0A,0x06,0x02,0x02,0x00],
  [0x04,0x0A,0x0A,0x0E,0x0C,0x00],
  [0x06,0x0A,0x06,0x0A,0x0A,0x00],
  [0x0C,0x02,0x0E,0x08,0x06,0x00],
  [0x0E,0x04,0x04,0x04,0x04,0x00],
  [0x0A,0x0A,0x0A,0x0A,0x0E,0x00],
  [0x0A,0x0A,0x0A,0x0A,0x04,0x00],
  [0x0A,0x0A,0x0E,0x0E,0x0A,0x00],
  [0x0A,0x0A,0x04,0x0A,0x0A,0x00],
  [0x0A,0x0A,0x04,0x04,0x04,0x00],
  [0x0E,0x08,0x04,0x02,0x0E,0x00],
  [0x06,0x02,0x02,0x02,0x06,0x00],
  [0x02,0x02,0x04,0x08,0x08,0x00],
  [0x06,0x04,0x04,0x04,0x06,0x00],
  [0x04,0x0A,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x00,0x00,0x00,0x0F],
  [0x06,0x04,0x00,0x00,0x00,0x00],
  [0x00,0x00,0x0C,0x0A,0x0E,0x00],
  [0x02,0x02,0x06,0x0A,0x06,0x00],
  [0x00,0x00,0x0C,0x02,0x0C,0x00],
  [0x08,0x08,0x0C,0x0A,0x0C,0x00],
  [0x00,0x00,0x0E,0x06,0x0C,0x00],
  [0x08,0x04,0x0E,0x04,0x04,0x00],
  [0x00,0x00,0x0E,0x0A,0x08,0x0E],
  [0x02,0x02,0x06,0x0A,0x0A,0x00],
  [0x04,0x00,0x04,0x04,0x04,0x00],
  [0x04,0x00,0x04,0x04,0x04,0x06],
  [0x02,0x02,0x0A,0x06,0x0A,0x00],
  [0x04,0x04,0x04,0x04,0x04,0x00],
  [0x00,0x00,0x0E,0x0E,0x0A,0x00],
  [0x00,0x00,0x06,0x0A,0x0A,0x00],
  [0x00,0x00,0x04,0x0A,0x04,0x00],
  [0x00,0x00,0x06,0x0A,0x06,0x02],
  [0x00,0x00,0x0C,0x0A,0x0C,0x08],
  [0x00,0x00,0x06,0x02,0x02,0x00],
  [0x00,0x00,0x0C,0x04,0x06,0x00],
  [0x00,0x04,0x0E,0x04,0x0C,0x00],
  [0x00,0x00,0x0A,0x0A,0x0E,0x00],
  [0x00,0x00,0x0A,0x0A,0x04,0x00],
  [0x00,0x00,0x0A,0x0E,0x0E,0x00],
  [0x00,0x00,0x0A,0x04,0x0A,0x00],
  [0x00,0x00,0x0A,0x0A,0x04,0x02],
  [0x00,0x00,0x06,0x04,0x0C,0x00],
  [0x0C,0x04,0x06,0x04,0x0C,0x00],
  [0x04,0x04,0x04,0x04,0x04,0x00],
  [0x06,0x04,0x0C,0x04,0x06,0x00],
  [0x0A,0x05,0x00,0x00,0x00,0x00],
  [0x00,0x04,0x0A,0x0E,0x00,0x00])     #  char num 127


class TFT144:

    ORIENTATION0=0
    ORIENTATION90=96
    ORIENTATION270=160
    ORIENTATION180=192
    # Do you rotate the image, or the device?  :-)

    GPIOplatform = "??"

    def __init__(self, CE, dc_pin, rst_pin=0, led_pin=0, orientation=ORIENTATION0):
        # RST pin.  0  means soft reset (but reset pin still needs holding high (3V)
        # LED pin, may be tied to 3V (abt 14mA) or used on a 3V logic pin (abt 7mA)
        self.BLUE = self.rgb(0,0,31)
        self.GREEN = self.rgb(0,31, 0)
        self.RED = self.rgb(31,0,0)
        self.PINK = self.rgb(31,11,11)
        self.VIOLET = self.rgb(11,11,31)
        self.LIGHTGREEN = self.rgb(11,31,11)
        self.BLACK = self.rgb(0,0,0)
        self.WHITE = self.rgb(31,31,31)
        self.GREY = self.rgb(11,11,11)
        self.LIGHTBLUE = self.rgb(0,31,31)
        self.YELLOW = self.rgb(31,31,0)
        # Some mixed colours could be better trimmed

        self.RST = rst_pin
        self.DC = dc_pin
        self.LED = led_pin
        GPIO.setup(dc_pin, GPIO.OUT)
        GPIO.output(dc_pin, GPIO.HIGH)
        if rst_pin:
            GPIO.setup(rst_pin, GPIO.OUT)
            GPIO.output(rst_pin, GPIO.HIGH)
        if led_pin:
            GPIO.setup(led_pin, GPIO.OUT)
            self.led_on(True)
        if platform == "RPI-GPIO":
            self.SPI = spidev.SpiDev()
            self.SPI.open(0, CE)    # CE is 0 or 1   (means pin CE0 or CE1)
        else:    # virtGPIO
            self.SPI = GPIO.SpiDev(CE)   # CE is a pin #
        sleep(0.5)
        self.init_LCD(orientation)

    def led_on(self, onoff):
        if self.LED:
            GPIO.output(self.LED, GPIO.HIGH if onoff else GPIO.LOW)

    #function to pack 3 bytes rgb value in 2 byte integer, R,G and B must be <=31
    def rgb(self, r,g,b):
       return ((b<<11) | (g<<6) | (r))

    #functions to translate x,y pixel coords. to text column,row
    def textX(self, x, font=3):
       return x*(self.fontDim[font][0])

    def textY(self, y, font=3):
       return y*(self.fontDim[font][1])

    #initial LCD reset
    def reset_LCD(self):
       if self.RST == 0:
           self.write_command(SOFT_RESET)
       else:
           GPIO.output(self.RST,False)
           sleep (0.2)
           GPIO.output(self.RST,True)
       sleep (0.2)
       return

    #write command to controller
    def write_command(self, address):
       GPIO.output(self.DC,False)
       self.SPI.writebytes([address])


    #write data
    def write_data(self, data):
       GPIO.output(self.DC,True)
       if not type(data) == type([]):   # is it already a list?
            data = [data]
       self.SPI.writebytes(data)

    #-------------------------------------------

    def init_LCD(self, orientation):
       self.reset_LCD()
       self.write_command(EXIT_SLEEP_MODE)
       sleep(0.05)
       self.write_command(SET_PIXEL_FORMAT)
       self.write_data(0x05)
       self.write_command(SET_GAMMA_CURVE)
       self.write_data(0x04)
       self.write_command(GAM_R_SEL)
       self.write_data(0x01)

       self.write_command(POSITIVE_GAMMA_CORRECT)
       self.write_data([0x3f, 0x25, 0x1c, 0x1e, 0x20, 0x12, 0x2a, 0x90, 0x24, 0x11, 0, 0, 0, 0, 0])

       self.write_command(NEGATIVE_GAMMA_CORRECT)
       self.write_data([0x20, 0x20, 0x20, 0x20, 0x05, 0, 0x15, 0xa7, 0x3d, 0x18, 0x25, 0x2a, 0x2b, 0x2b, 0x3a])
       self.write_command(FRAME_RATE_CONTROL1)
       self.write_data([0x08, 0x08])

       self.write_command(DISPLAY_INVERSION)
       self.write_data(0x01)

       self.write_command(POWER_CONTROL1)
       self.write_data([0x0a, 0x02])

       self.write_command(POWER_CONTROL2)
       self.write_data(0x02)

       self.write_command(VCOM_CONTROL1)
       self.write_data([0x50, 0x5b])

       self.write_command(VCOM_OFFSET_CONTROL)
       self.write_data(0x40)
       self.set_frame(0, 0x7f, 0, 0x7f)

       self.write_command(SET_ADDRESS_MODE)
       self.write_data(orientation)

       self.clear_display(self.BLACK)
       self.write_command(SET_DISPLAY_ON)
    #   self.write_command(WRITE_MEMORY_START)

    # clear display,writes same color pixel in all screen
    def clear_display(self, color):
       color_hi=color>>8   #requires two 1-byte writes
       color_lo= color&(~(65280))
       self.set_frame(0, 0x7f, 0, 0x7f)

       self.write_command(WRITE_MEMORY_START)

       for row in range(128):
           self.write_data([color_hi, color_lo] * 128)

    def set_frame(self, x1, x2, y1, y2 ):
       self.write_command(SET_COLUMN_ADDRESS)
       self.write_data([0, x1, 0, x2])
       self.write_command(SET_PAGE_ADDRESS)
       self.write_data([0,y1,0,y2])


    # draw a dot in x,y with 'color' colour
    def draw_dot(self, x,y,color):
       color_hi=color>>8
       color_lo= color&(~(65280))
       self.set_frame(x, x+1, y, y+1)
       self.write_command(WRITE_MEMORY_START)
       self.write_data([color_hi,color_lo])

    # Bresenham's algorithm to draw a line with integers
    # x0<=x1, y0<=y1
    def draw_line(self, x0,y0,x1,y1,color):
       dy=y1-y0
       dx=x1-x0
       if (dy<0):
          dy=-dy
          stepy=-1
       else:
          stepy=1
       if (dx<0):
          dx=-dx
          stepx=-1
       else:
          stepx=1
       dx <<=1
       dy <<=1
       self.draw_dot(x0,y0,color)
       if (dx>dy):
          fraccion=dy-(dx>>1)
          while (x0!=x1):
             if (fraccion>=0):
                y0 +=stepy
                fraccion -=dx
             x0 +=stepx
             fraccion +=dy
             self.draw_dot(x0,y0,color)
       else:
          fraccion=dx-(dy>>1)
          while (y0!=y1):
             if (fraccion>=0):
                x0 +=stepx
                fraccion -=dy
             y0 +=stepy
             fraccion +=dx
             self.draw_dot(x0,y0,color)

    # draws hollow rectangle
    # x0<=x1, y0<= y1
    def draw_rectangle(self, x0,y0,x1,y1,color):
       self.draw_line(x0,y0,x0,y1,color)
       self.draw_line(x0,y1,x1,y1,color)
       self.draw_line(x1,y0,x1,y1,color)
       self.draw_line(x0,y0,x1,y0,color)

    # draws filled rectangle, fills frame memory section with same pixel
    # x0<=x1, y0<=y1
    def draw_filled_rectangle(self, x0,y0,x1,y1,color):
       color_hi=color>>8
       color_lo= color&(~(65280))
       self.set_frame(x0, x1, y0, y1)

       self.write_command(WRITE_MEMORY_START)
       for pixels in range (0,(1+x1-x0)):
            dbuf = [color_hi, color_lo] * (y1-y0)
            self.write_data(dbuf)

    #Bresenham's circle algorithm, circle can't pass screen boundaries
    def draw_circle(self, x0,y0,radio,color):
       error=1-radio
       errorx=1
       errory=-2*radio
       y=radio
       x=0
       self.draw_dot(x0,y0+radio,color)
       self.draw_dot(x0,y0-radio,color)
       self.draw_dot(x0+radio,y0,color)
       self.draw_dot(x0-radio,y0,color)
       while (x<y):
          if (error>=0):
             y -=1
             errory +=2
             error +=errory
          x +=1
          errorx +=2
          error +=errorx
          self.draw_dot(x0+x,y0+y,color)
          self.draw_dot(x0-x,y0+y,color)
          self.draw_dot(x0+x,y0-y,color)
          self.draw_dot(x0-x,y0-y,color)
          self.draw_dot(x0+y,y0+x,color)
          self.draw_dot(x0-y,y0+x,color)
          self.draw_dot(x0+y,y0-x,color)
          self.draw_dot(x0-y,y0-x,color)


    fontDim = ([0], [4, 6, 1], [8, 12, 2], [6, 8, 1], [12, 16, 2], [8, 12, 1], [16, 24, 2], [8, 16, 1], [16, 32, 2] )
    # Font dimensions for fonts 1-8.  [W, H, Scale]
    fontW = 0   # These are valid only AFTER a char was displayed
    fontH = 0

    # writes a character in graphic coordinates x,y, with
    # foreground and background colours
    def put_char(self, character,x,y,fgcolor,bgcolor, font = 3):
       fgcolor_hi=fgcolor>>8
       fgcolor_lo= fgcolor&(~(65280))
       bgcolor_hi=bgcolor>>8
       bgcolor_lo= bgcolor&(~(65280))
       self.fontW = self.fontDim[font][0]
       self.fontH = self.fontDim[font][1]
       fontScale = self.fontDim[font][2]
       character = ord(character)
       if not (font == 3 or font == 4):   # restricted char set 32-126 for most
           if character < 32 or character > 126: # only strictly ascii chars
             character = 0
           else:
             character -= 32
       self.set_frame(x, (x+self.fontW-1), y, (y + self.fontH-1))
       xx = [0]
       if fontScale == 2:
           xx = [0, 2, 2 * self.fontW, 2 + (2 * self.fontW) ]   # DOUBLE: every pixel becomes a 2x2 pixel

       self.write_command(WRITE_MEMORY_START)
       cbuf = [0] * (self.fontW * self.fontH * 2)
       for row in range (0, self.fontH / fontScale):
          for column in range (0,self.fontW / fontScale):
             topleft = ((column*2*fontScale) + (row*2*self.fontW*fontScale))
             if font <=2:
                pixOn = (font4x6[character][row]) & (1<<column)
             elif font >= 7:
                pixOn = (font8x16[character][row]) & (1<<column)
             elif font >= 5:
                pixOn = (font8x12[character][row]) & (1<<column)
             else:
                pixOn = (font6x8[character][column]) & (1<<row)
             if pixOn:
                 for rpt in xx:    # one pixel or a 2x2 "doubled" pixel
                    cbuf[rpt+topleft] = fgcolor_hi
                    cbuf[rpt+1+topleft] = fgcolor_lo
             else:
                 for rpt in xx:
                    cbuf[rpt+topleft] = bgcolor_hi
                    cbuf[rpt+1+topleft] = bgcolor_lo
       self.write_data(cbuf)


    # writes a string in graphic x,y coordinates, with
    # foreground and background colours. If edge of screen is reached,
    # it wraps to next text line to same starting x coord.
    def put_string(self, str,originx,y,fgcolor,bgcolor, font = 3):
       x = originx
       fontW = self.fontDim[font][0]
       fontH = self.fontDim[font][1]
       for char_number in range (0,len(str)):
          if ((x+fontW)>128):
             x=originx
             y +=(fontH)
          if ((y+fontH)>128):
             break
          self.put_char(str[char_number],x,y,fgcolor,bgcolor, font)
          x +=(fontW)




    # defines scroll area, row1=lines in top fixed area,
    # row2= lines in bottom fixed area
    def scroll_area(self, row1,row2):
       high=128-(row1+row2)
       self.write_command(SET_SCROLL_AREA)
       self.write_data([0x00, row1, 0, high, 0, row2])
       self.set_frame(0, 0x7f, 0, 0x7f)

    # starts vertical scroll, line=how many lines from the start
    # of the memory frame will be scrolled
    def scroll_start(self, line):
       self.write_command(SET_SCROLL_START)
       self.write_data([0x00, line])

    def draw_bmp(self, filename, x0=0, y0=0):
        if not os.path.exists(filename):
            return False
        with open(filename, 'rb') as bitmap_file:
            bitmap_file.seek(18)
            w = ord(bitmap_file.read(1))
            bitmap_file.seek(22)
            h = ord(bitmap_file.read(1))
            bitmap_file.seek(10)
            start = ord(bitmap_file.read(1))
            bitmap_file.seek(start)
            self.set_frame(x0, x0+w-1, y0, y0+h-1)
            self.write_command(WRITE_MEMORY_START)
            for y in xrange(h):   # 3 bytes of colour / pixel
                  dbuf = [0] * (w*2)
                  for x in xrange(w):
                      b = ord(bitmap_file.read(1)) >>3   # We want only 5 bits of colour
                      g = ord(bitmap_file.read(1)) >>3
                      r = ord(bitmap_file.read(1)) >>3
                      RGB = self.rgb(r, g, b)
                      dbuf[2*x] = RGB>>8
                      dbuf[1 + (2*x)] = RGB&(~65280)
                  self.write_data(dbuf)
                  # Now, BMP has a 4byte alignment issue at end of each line   V1.0.1
                  x = 3*w # bytes in line @ 3bytes/pixel
                  while (x % 4):
                      x += 1
                      bitmap_file.read(1)   # waste a byte until aligned
        return True

    def invert_screen(self):
       self.write_command(ENTER_INVERT_MODE)

    def normal_screen(self):
       self.write_command(EXIT_INVERT_MODE)

########################################################################

TFT144.GPIOplatform = platform
